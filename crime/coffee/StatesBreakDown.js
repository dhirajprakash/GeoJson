// Generated by CoffeeScript 2.2.4
(function() {
  var ref,
    boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

  ref = this.StatesBreakDown = class StatesBreakDown extends BreakdownChart {
    constructor(id, data, color, domain) {
      var i;
      super(id, data, color);
      this.create_vis = this.create_vis.bind(this);
      this.show_details = this.show_details.bind(this);
      this.hide_details = this.hide_details.bind(this);
      this.trigger_show_cities = this.trigger_show_cities.bind(this);
      // this will actually show the cities
      this.show_cities = this.show_cities.bind(this);
      this.update_data = this.update_data.bind(this);
      this.update_display = this.update_display.bind(this);
      this.domain = domain != null ? domain : d3.range(100, 1700, 200);
      this.color_class = d3.scale.threshold().domain(this.domain).range((function() {
        var j, results;
        results = [];
        for (i = j = 8; j >= 0; i = --j) {
          results.push(`q${i}-9`);
        }
        return results;
      })());
      this.crimes = [];
      this.legend_text = () => {
        var e, text;
        text = (function() {
          var j, len, ref1, results;
          ref1 = this.domain;
          results = [];
          for (j = 0, len = ref1.length; j < len; j++) {
            e = ref1[j];
            results.push(`< ${e}`);
          }
          return results;
        }).call(this);
        text.push(`${this.domain[this.domain.length - 1]} or more`);
        return text;
      };
      this.tips = {};
    }

    create_vis() {
      boundMethodCheck(this, ref);
      this.tips = {};
      super.create_vis();
      // since we are using a threshold scale, we need to make sure we fall into the bucket
      // we promise to fall into in the legend text
      this.legend = new Legend(this.vis, ((i) => {
        return this.color_class(this.domain[i] - 1);
      }), this.legend_text(), 'Crime per 100,000 population', {
        x: 75,
        y: 40
      });
      this.legend.show(true);
      this.create_scale();
      return $(this.id).append(`<div style='position: relative; left: ${this.width}px; top: -600px'><span>Click a bubble for details</span></div>`);
    }

    get_group_data(d) {
      return [d];
    }

    get_group_title(d) {
      return d.name;
    }

    display() {
      super.display();
      return this.groups.on("click", (d, i) => {
        return this.trigger_show_cities(d, i, this);
      });
    }

    show_details(data) {
      var content, crime;
      boundMethodCheck(this, ref);
      content = "<b> &lt;Click Me&gt; </b><br />";
      content += `Population: ${this.fixed_formatter(data.value)}<br/>Crime: ${this.fixed_formatter(d3.sum((function() {
        var j, len, ref1, results;
        ref1 = this.crimes;
        results = [];
        for (j = 0, len = ref1.length; j < len; j++) {
          crime = ref1[j];
          results.push(data[crime]);
        }
        return results;
      }).call(this)))}<br />`;
      content += `Crime per 100,000: ${this.percent_formatter(data.group)}`;
      if (this.tips[data.id] == null) {
        this.tips[data.id] = new Opentip(`#${data.id}`, content, "", {
          style: "glass",
          target: true,
          showOn: "creation",
          stem: "middle",
          tiptJoint: "middle"
        });
      } else {
        this.tips[data.id].setContent(content);
      }
      return this.tips[data.id].show();
    }

    hide_details(data) {
      var ref1;
      boundMethodCheck(this, ref);
      return (ref1 = this.tips[data.id]) != null ? ref1.hide() : void 0;
    }

    trigger_show_cities(d, i) {
      var ref1, that;
      boundMethodCheck(this, ref);
      if ((ref1 = this.tips[d.id]) != null) {
        ref1.hide();
      }
      this.data.forEach(((d, i) => {
        d.x = d.px = this.getX(i);
        return d.y = d.py = this.getY(i);
      }));
      // move them all beyond the screen
      that = this;
      this.groups.transition().duration(1200).attr("transform", function(d, i) {
        return `translate(${that.width + that.getX(i)}, ${that.getY(i)})`;
      });
      this.cleanup();
      // remember the state in window location
      // and trigger window "hashchange" event to
      // actually show the cities
      return d3.timer((function() {
        $.bbq.pushState({
          'by_state': i
        });
        return true;
      }), 1400);
    }

    show_cities(i) {
      var data, link;
      boundMethodCheck(this, ref);
      data = this.data[i].cities;
      this.byCity = new AllStates(this.id, data, this.colorScheme, this.domain);
      this.byCity.crimes = this.crimes;
      if (this.data[i].id === "NEW_JERSEY" || this.data[i].id === "CONNECTICUT") {
        this.byCity.height = 900;
        this.byCity.center = {
          x: this.byCity.width / 2,
          y: this.byCity.height / 2
        };
        this.byCity.max_range = 60;
        this.byCity.scale();
        this.byCity.update_data();
      }
      this.byCity.create_vis();
      this.byCity.display();
      this.byCity.bubble_scale.svg.attr("height", this.byCity.bubble_scale.height + 80);
      this.byCity.bubble_scale.svg.append("text").attr("x", this.byCity.bubble_scale.width / 2 + 5).attr("y", this.byCity.bubble_scale.height + 20).attr("text-anchor", "middle").style("font-size", "18").text(this.data[i].name);
      link = '<a href="#by_state">Back to the states view</a>';
      return $(`#${this.byCity.bubble_scale.id}`).append(link);
    }

    update_data() {
      boundMethodCheck(this, ref);
      super.update_data();
      if (this.crimes.length > 0) {
        return this.data.forEach((d) => {
          var crime;
          return d.group = d3.sum((function() {
            var j, len, ref1, results;
            ref1 = this.crimes;
            results = [];
            for (j = 0, len = ref1.length; j < len; j++) {
              crime = ref1[j];
              results.push(d[crime]);
            }
            return results;
          }).call(this)) / d.value * 100000;
        });
      }
    }

    update_display(state) {
      var that;
      boundMethodCheck(this, ref);
      this.update_data();
      that = this;
      if (state != null) {
        if (this.byCity == null) {
          return this.show_cities(state);
        } else {
          this.byCity.crimes = this.crimes;
          this.byCity.cleanup();
          return this.byCity.update_display();
        }
      } else {
        return this.get_groups().selectAll("circle").transition().duration(1000).attr("class", function(d) {
          return that.color_class(d.group);
        }).each("end", function(d) {
          return d3.select(this).attr("stroke", d3.rgb($(this).css("fill")).darker());
        });
      }
    }

  };

}).call(this);
