// Generated by CoffeeScript 2.2.4
(function() {
  this.Search = class Search {
    constructor(container, visual, mapData, processFoundItem, anchor) {
      // creates the UI
      // for searching classes
      this.create_search_box = this.create_search_box.bind(this);
      // called when we have made our selection
      // by picking it from the typeahead menu
      this.search = this.search.bind(this);
      this.id = `#${container.removeLeadHash()}`;
      this.visual = visual;
      this.data = visual.data;
      this.processFoundItem = processFoundItem;
      this.anchor = anchor;
      // a list of classes to choose from
      // for the typeahead
      this.entities = this.data.map(mapData);
      $.fn.typeahead.Constructor.prototype.blur = function() {
        var that;
        that = this;
        return setTimeout((function() {
          return that.hide();
        }), 250);
      };
    }

    create_search_box() {
      var findEntity, html, that;
      findEntity = "#findEntity";
      if ($(findEntity).length < 1) {
        html = '<div class="control-group" style="left: ' + this.anchor.x + 'px; top: ' + this.anchor.y + 'px; position: relative; width: 200px" > <label class="control-label" for="findEntity">Busca:</label> <div class="controls"> <input type="text" autocomplete="off" style="width: 150px" id="findEntity" name="findEntity"> </div> </div>';
        $(this.id).append(html);
        $(findEntity).val("");
        that = this;
        // create a "typehead" object for autocomplete functionality
        $(findEntity).typeahead({
          items: 10, // limit the menu to this number of items
          source: (query) => {
            var entity, error, good, res;
            // style manipulations for error and success/neutral
            error = function() {
              return $(findEntity).closest('.control-group').addClass('error');
            };
            good = function() {
              return $(findEntity).closest('.control-group').removeClass('error');
            };
            if (this.found != null) {
              this.visual.hide_details(this.found);
              this.found = null;
            }
            good();
            // select classes that start with our query string
            query = query.toUpperCase();
            res = (function() {
              var i, len, ref, results;
              ref = this.entities;
              results = [];
              for (i = 0, len = ref.length; i < len; i++) {
                entity = ref[i];
                if (entity.slice(0, query.length).toUpperCase() === query) {
                  results.push(entity);
                }
              }
              return results;
            }).call(this);
            if (res.length === 0) {
              error();
            }
            return res;
          },
          updater: function(item) {
            return that.search(item);
          },
          // custom highlighter: only highlight the leading digits of the class code
          // the default hightlights all occurences of the digit but that's not how we search
          highlighter: function(item) {
            return `<strong>${item.slice(0, this.query.length)}</strong>${item.slice(this.query.length)}`;
          }
        });
        return $(findEntity).focusout(() => {
          if (this.found != null) {
            return this.visual.hide_details(this.found);
          }
        });
      }
    }

    search(text) {
      var element;
      this.found = this.processFoundItem(this.data, text);
      element = this.visual.vis.select(`#${this.found.id}`);
      this.visual.show_details(this.found, 0, element);
      return text;
    }

  };

}).call(this);
