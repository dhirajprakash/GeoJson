// Generated by CoffeeScript 2.2.4
(function() {
  // id - id of the container to create the map in
  // geometry - geometrical data in TopoJson
  // data - crime data
  // color - Cynthia Brewer's color scheme
  var ref,
    boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

  ref = this.CrimeUsMap = class CrimeUsMap extends UsMap {
    constructor(id, geometry, data, color, domain) {
      super(id, geometry);
      this.display = this.display.bind(this);
      this.show_details = this.show_details.bind(this);
      this.hide_details = this.hide_details.bind(this);
      this.delay = 4000;
      this.data = data;
      this.allStates = new AllStates(id, d3.values(data), color, domain);
      this.crimes = [];
    }

    display() {
      var color_class;
      boundMethodCheck(this, ref);
      this.allStates.crimes = this.crimes;
      this.allStates.update_data();
      this.allStates.cleanup();
      super.display();
      this.legend = new Legend(this.enclosingContainer, ((i) => {
        return this.allStates.color_class(this.allStates.domain[i] - 1);
      }), this.allStates.legend_text(), 'Crime por 100,000 população', {
        x: 75,
        y: 40
      });
      this.legend.show(true);
      this.enclosingContainer.attr("class", this.allStates.colorScheme);
      color_class = (state) => {
        return this.allStates.color_class(this.data[state.toUpperCase()].group);
      };
      this.states = this.states.style("fill", null).attr("class", function(d) {
        return color_class(d.properties.name);
      });
      this.states = this.states.attr("stroke-width", 2).attr("stroke", function(d) {
        return d3.rgb($(this).css("fill")).darker();
      });
      return this.create_cities();
    }

    show_details(data) {
      boundMethodCheck(this, ref);
      return this.allStates.show_details(this.data[data.properties.name.toUpperCase()]);
    }

    hide_details(data) {
      boundMethodCheck(this, ref);
      return this.allStates.hide_details(this.data[data.properties.name.toUpperCase()]);
    }

  };

}).call(this);
