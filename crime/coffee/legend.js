// Generated by CoffeeScript 2.2.4
(function() {
  this.Legend = class Legend {
    // svg - svg cell to append the legend to
    // color_class - function to convert from a number to a color class from colorbrewer.css
    // data - an array of text data
    // description - what does the legend indicate
    // start {x, y} - starting position
    // isVertical - should vertical layout be used instead of horizontal (false by default)
    // helpText - a tooltip to pop-up in case we can display some helpful message
    constructor(svg, color_class, data, description, start, isVertical, helpText) {
      this.show = this.show.bind(this);
      this.set_title = this.set_title.bind(this);
      this.translate = this.translate.bind(this);
      isVertical = isVertical != null ? isVertical : false;
      if ((description != null)) {
        this.title = svg.append("text").attr("x", start.x).attr("y", start.y + (isVertical ? 0 : 30)).attr("visibility", "hidden").text(description);
        if (helpText != null) {
          this.title = this.title.attr("fill", "#08C").on("mouseover", function() {
            return d3.select(this).style("cursor", "help");
          }).on("mouseout", function() {
            return d3.select(this).style("cursor", "auto");
          });
          this.title.append("title").text(helpText);
        }
      }
      this.legend = svg.selectAll("#vis_legend").data(data).enter().append("g").attr("id", "vis_legend").attr("visibility", "hidden").attr("transform", (d, i) => {
        return this.translate(start, i, isVertical);
      });
      this.legend.append("circle").attr("class", function(d, i) {
        return color_class(i);
      }).attr("r", 4).attr("stroke-width", 1).attr("stroke", function(d, i) {
        return d3.rgb($(this).css("fill")).darker();
      });
      this.legend.append("text").attr("x", 14).attr("dy", ".35em").text(String);
    }

    show(isVisible) {
      this.legend.attr("visibility", isVisible ? "visible" : "hidden");
      return this.title.attr("visibility", isVisible ? "visible" : "hidden");
    }

    set_title(text) {
      return this.title.text(text);
    }

    translate(start, i, isVertical) {
      if (isVertical) {
        return `translate(${start.x}, ${start.y + 10 + i * 22})`;
      } else {
        return `translate(${start.x + i * 65}, ${start.y})`;
      }
    }

  };

}).call(this);
