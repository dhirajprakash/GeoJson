// Generated by CoffeeScript 2.2.4
(function() {
  this.UsMap = class UsMap {
    // id - id of the container where the map goes
    // data - map data
    constructor(id, data) {
      this.normalize_state = this.normalize_state.bind(this);
      this.create_vis = this.create_vis.bind(this);
      this.display = this.display.bind(this);
      this.create_cities = this.create_cities.bind(this);
      this.cleanup = this.cleanup.bind(this);
      this.width = 960;
      this.id = `#${id.removeLeadHash()}`;
      this.us = data;
      this.height = 800;
      this.color = d3.scale.linear().domain(['A'.charCodeAt(0), 'Z'.charCodeAt(0)]).range(['#ddc', '#fee3a6']);
      this.country = topojson.object(this.us, this.us.objects.country);
      this.projection = d3.geo.albersUsa();
      this.path = d3.geo.path().projection(this.projection).pointRadius(1);
    }

    normalize_state(state) {
      return state.toUpperCase().split(' ').join('_');
    }

    create_vis() {
      $(this.id).children().remove();
      $(this.id).css("width", `${this.width}px`);
      $(this.id).css("height", `${this.height}px`);
      this.enclosingContainer = d3.select(this.id).append("svg").style("position", "relative");
      return this.svg = this.enclosingContainer.append("svg").style("position", "relative").style("top", "100px").attr("y", 100).attr("width", this.width).attr("height", this.height);
    }

    display() {
      var that;
      // draw country
      this.svg.selectAll(".country").data(this.country.geometries).enter().append("path").attr("class", "country").attr("d", this.path);
      that = this;
      this.states = this.svg.selectAll(".state").data(topojson.object(this.us, this.us.objects.states).geometries, function(d) {
        return d.properties.name;
      }).enter().append("path").attr("d", this.path).attr("class", ".state").attr("id", (d) => {
        return this.normalize_state(d.properties.name);
      }).style("fill", (d) => {
        return this.color(d.properties.name.charCodeAt(0));
      }).on("mouseover", function(d, i) {
        return that.show_details(d, i, this);
      }).on("mouseout", function(d, i) {
        return that.hide_details(d, i, this);
      });
      this.svg.append("path").datum(topojson.mesh(this.us, this.us.objects.states)).attr("d", this.path).attr("class", "state-boundary");
      return this.create_cities();
    }

    create_cities() {
      var cities, cities_collection;
      // create a filtered cities collection
      cities = this.us.objects.cities.geometries.filter(function(d) {
        return d.properties.scalerank < 4;
      });
      cities_collection = {
        type: this.us.objects.cities.type,
        geometries: cities
      };
      this.svg.append("path").datum(topojson.object(this.us, cities_collection)).attr("d", this.path).attr("class", "place");
      this.svg.selectAll(".place-label").data(topojson.object(this.us, cities_collection).geometries).enter().append("text").attr("class", "place-label").attr("transform", (d) => {
        return `translate(${this.projection(d.coordinates)})`;
      }).attr("dy", ".35em").text(function(d) {
        return d.properties.name;
      });
      this.svg.selectAll(".place-label").attr("x", function(d) {
        if (d.coordinates[0] > -1) {
          return 6;
        } else {
          return -6;
        }
      }).style("text-anchor", function(d) {
        if (d.coordinates[0] > -1) {
          return "start";
        } else {
          return "end";
        }
      });
      return this.svg.selectAll(".country-label").data(this.country.geometries).enter().append("text").attr("class", function(d) {
        return `country-label ${d.id})`;
      }).attr("transform", (d) => {
        return `translate(${this.path.centroid(d)})`;
      }).attr("dy", ".35em").text(function(d) {
        return d.properties.name;
      });
    }

    cleanup() {
      return void 0;
    }

  };

}).call(this);
